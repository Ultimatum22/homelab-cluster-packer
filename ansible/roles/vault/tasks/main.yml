---
- name: Ensure Vault is installed
  block:
    - name: Test vault
      ansible.builtin.command: vault --version
      register: vault_version_test
      changed_when: false

    - name: Test if correct version is installed
      ansible.builtin.assert:
        that:
          - vault_version in vault_version_test.stdout
        success_msg: "Vault version {{ vault_version }} is installed"
        fail_msg: Vault was not successfully installed
  rescue:
    - name: Ensure old vault is removed
      ansible.builtin.file:
        path: "{{ vault_install_dir }}/vault"
        state: absent

    - name: Install Vault
      ansible.builtin.unarchive:
        src: "{{ vault_zip_url }}"
        dest: "{{ vault_install_dir }}"
        owner: root
        group: root
        remote_src: true
        mode: "0777"

- name: Create Vault group
  group:
    name: "{{ vault_group }}"
    system: yes
    state: present

- name: Create Vault user
  user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    shell: /bin/false
    createhome: no
    system: yes
    state: present

- name: Create Vault configuration directory
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
    state: directory
  with_items:
    - "{{ vault_config_dir }}"
    - "{{ vault_data_dir }}"
    - "{{ vault_config_dir }}/services.d/"

- name: Create vault.service configuration
  template:
    src: vault.service.j2
    dest: /etc/systemd/system/vault.service
    owner: root
    group: root
    mode: "0644"
  notify: restart vault

- name: Create Vault configuration file
  template:
    src: vault.hcl.j2
    dest: "{{ vault_config_dir }}/vault.hcl"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0644"
  notify: restart vault

- name: Copy vault-unseal.sh scripts
  copy:
    src: vault-unseal.sh
    dest: "{{ vault_install_dir }}"
    owner: root
    group: root
    mode: "0644"

- name: Ensure Vault service is started and enabled on boot
  ansible.builtin.systemd_service:
    name: vault
    state: started
    enabled: yes
    daemon_reload: true

- name: Waiting for service to start up
  ansible.builtin.pause:
    seconds: 5

- name: initialize vault
  shell: "export VAULT_ADDR=http://{{ ansible_default_ipv4.address }}:8200; vault operator init"
  register: initialize_vault
  run_once: true

- name: save vault init secrets
  ansible.builtin.copy:
    content="{{ result.stdout }}"
    dest="{{ vault_init_secrets_file }}"
    owner=root
    group=root
    mode=600
  run_once: true
  when: initialize_vault | success

- debug:
    vars: initialize_vault

# Consul Service Discovery
- name: register service within consul
  template:
    src="{{ item }}"
    dest="{{ consul.config_dir }}/services.d/"
    owner=consul
    group=root
    mode=0640
  with_fileglob:
    - ../templates/services.d/*.json
  ignore_errors: true
  register: result

- name: restart consul
  service:
    name="consul"
    sleep=5
    state=restarted
  ignore_errors: true
  when: result|success

- name: unseal vault
  command: "{{ vault_install_dir }}/vault-unseal.sh"
  run_once: true

- name: reset audit backend
  shell: source /etc/profile; vault audit-disable file >/dev/null
  ignore_errors: true
  run_once: true

- name: enable audit backend
  shell: "source /etc/profile; vault audit-enable file path={{ vault.log_dir }}/vault-audit.log"
  run_once: true

# - name: find all policies
#   find:
#     paths: "{{ vault.config_dir }}/policies"
#     patterns: "*.hcl"
#   register: policies_glob
#   run_once: true

# - name: find all policies
#   command: find . -name "*.hcl"
#   args:
#     chdir: "{{ vault.config_dir }}/policies"
#   register: policies_glob
#   run_once: true
#
# - debug: var=policies_glob
#
#
# - name: configure audit backend
#   shell: "source /etc/profile; vault policy-write {{ item.path.split('/')[-1] | replace('.hcl', '') }} {{ item.path }}"
#   with_items:
#     - "{{ policies_glob.files }}"
#   run_once: true

# - name: configure audit backend
#   shell: "source /etc/profile; vault policy-write {{ item | replace('.hcl', '') }} {{ item }}"
#   args:
#     chdir: "{{ vault.config_dir }}/policies"
#   with_items:
#     - "{{ policies_glob.stdout_lines }}"
#   run_once: true
