---
- name: Ensure Vault is installed
  block:
    - name: Test vault
      ansible.builtin.command: vault --version
      register: vault_version_test
      changed_when: false

    - name: Test if correct version is installed
      ansible.builtin.assert:
        that:
          - vault_version in vault_version_test.stdout
        success_msg: "Vault version {{ vault_version }} is installed"
        fail_msg: Vault was not successfully installed
  rescue:
    - name: Ensure old vault is removed
      ansible.builtin.file:
        path: "{{ vault_install_dir }}/vault"
        state: absent

    - name: Install Vault
      ansible.builtin.unarchive:
        src: "{{ vault_zip_url }}"
        dest: "{{ vault_install_dir }}"
        owner: root
        group: root
        remote_src: true
        mode: "0777"

- name: Create Vault group
  group:
    name: "{{ vault_group }}"
    system: yes
    state: present

- name: Create Vault user
  user:
    name: "{{ vault_user }}"
    group: "{{ vault_group }}"
    shell: /bin/false
    createhome: no
    system: yes
    state: present

- name: Create Vault configuration directory
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0755"
    state: directory
  with_items:
    - "{{ vault_config_dir }}"
    - "{{ vault_data_dir }}"

- name: Create vault.service configuration
  template:
    src: vault.service.j2
    dest: /etc/systemd/system/vault.service
    owner: root
    group: root
    mode: "0644"
  notify: restart vault

- name: Create Vault configuration file
  template:
    src: vault.hcl.j2
    dest: "{{ vault_config_dir }}/vault.hcl"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0644"
  notify: restart vault

- name: Ensure Vault service is started and enabled on boot
  ansible.builtin.systemd_service:
    name: vault
    state: started
    enabled: yes
    daemon_reload: true